// Code generated by MockGen. DO NOT EDIT.
// Source: server/domain/greet.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	greet "github.com/imind-lab/greet/server/proto/greet"
	gomock "github.com/golang/mock/gomock"
)

// MockGreetDomain is a mock of GreetDomain interface.
type MockGreetDomain struct {
	ctrl     *gomock.Controller
	recorder *MockGreetDomainMockRecorder
}

// MockGreetDomainMockRecorder is the mock recorder for MockGreetDomain.
type MockGreetDomainMockRecorder struct {
	mock *MockGreetDomain
}

// NewMockGreetDomain creates a new mock instance.
func NewMockGreetDomain(ctrl *gomock.Controller) *MockGreetDomain {
	mock := &MockGreetDomain{ctrl: ctrl}
	mock.recorder = &MockGreetDomainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreetDomain) EXPECT() *MockGreetDomainMockRecorder {
	return m.recorder
}

// CreateGreet mocks base method.
func (m *MockGreetDomain) CreateGreet(ctx context.Context, dto *greet.Greet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGreet", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGreet indicates an expected call of CreateGreet.
func (mr *MockGreetDomainMockRecorder) CreateGreet(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGreet", reflect.TypeOf((*MockGreetDomain)(nil).CreateGreet), ctx, dto)
}

// DeleteGreetById mocks base method.
func (m *MockGreetDomain) DeleteGreetById(ctx context.Context, id int32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGreetById", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGreetById indicates an expected call of DeleteGreetById.
func (mr *MockGreetDomainMockRecorder) DeleteGreetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGreetById", reflect.TypeOf((*MockGreetDomain)(nil).DeleteGreetById), ctx, id)
}

// GetGreetById mocks base method.
func (m *MockGreetDomain) GetGreetById(ctx context.Context, id int32) (*greet.Greet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGreetById", ctx, id)
	ret0, _ := ret[0].(*greet.Greet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGreetById indicates an expected call of GetGreetById.
func (mr *MockGreetDomainMockRecorder) GetGreetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGreetById", reflect.TypeOf((*MockGreetDomain)(nil).GetGreetById), ctx, id)
}

// GetGreetList mocks base method.
func (m *MockGreetDomain) GetGreetList(ctx context.Context, status, lastId, pageSize, page int32) (*greet.GreetList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGreetList", ctx, status, lastId, pageSize, page)
	ret0, _ := ret[0].(*greet.GreetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGreetList indicates an expected call of GetGreetList.
func (mr *MockGreetDomainMockRecorder) GetGreetList(ctx, status, lastId, pageSize, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGreetList", reflect.TypeOf((*MockGreetDomain)(nil).GetGreetList), ctx, status, lastId, pageSize, page)
}

// UpdateGreetCount mocks base method.
func (m *MockGreetDomain) UpdateGreetCount(ctx context.Context, id, num int32, column string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGreetCount", ctx, id, num, column)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGreetCount indicates an expected call of UpdateGreetCount.
func (mr *MockGreetDomainMockRecorder) UpdateGreetCount(ctx, id, num, column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGreetCount", reflect.TypeOf((*MockGreetDomain)(nil).UpdateGreetCount), ctx, id, num, column)
}

// UpdateGreetStatus mocks base method.
func (m *MockGreetDomain) UpdateGreetStatus(ctx context.Context, id, status int32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGreetStatus", ctx, id, status)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGreetStatus indicates an expected call of UpdateGreetStatus.
func (mr *MockGreetDomainMockRecorder) UpdateGreetStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGreetStatus", reflect.TypeOf((*MockGreetDomain)(nil).UpdateGreetStatus), ctx, id, status)
}
