// Code generated by MockGen. DO NOT EDIT.
// Source: server/repository/greet.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/imind-lab/greet/server/model"
	repository "github.com/imind-lab/greet/server/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockGreetRepository is a mock of GreetRepository interface.
type MockGreetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGreetRepositoryMockRecorder
}

// MockGreetRepositoryMockRecorder is the mock recorder for MockGreetRepository.
type MockGreetRepositoryMockRecorder struct {
	mock *MockGreetRepository
}

// NewMockGreetRepository creates a new mock instance.
func NewMockGreetRepository(ctrl *gomock.Controller) *MockGreetRepository {
	mock := &MockGreetRepository{ctrl: ctrl}
	mock.recorder = &MockGreetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreetRepository) EXPECT() *MockGreetRepositoryMockRecorder {
	return m.recorder
}

// CreateGreet mocks base method.
func (m_2 *MockGreetRepository) CreateGreet(ctx context.Context, m model.Greet) (model.Greet, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateGreet", ctx, m)
	ret0, _ := ret[0].(model.Greet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGreet indicates an expected call of CreateGreet.
func (mr *MockGreetRepositoryMockRecorder) CreateGreet(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGreet", reflect.TypeOf((*MockGreetRepository)(nil).CreateGreet), ctx, m)
}

// DeleteGreetById mocks base method.
func (m *MockGreetRepository) DeleteGreetById(ctx context.Context, id int32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGreetById", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGreetById indicates an expected call of DeleteGreetById.
func (mr *MockGreetRepositoryMockRecorder) DeleteGreetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGreetById", reflect.TypeOf((*MockGreetRepository)(nil).DeleteGreetById), ctx, id)
}

// FindGreetById mocks base method.
func (m *MockGreetRepository) FindGreetById(ctx context.Context, id int32) (model.Greet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGreetById", ctx, id)
	ret0, _ := ret[0].(model.Greet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGreetById indicates an expected call of FindGreetById.
func (mr *MockGreetRepositoryMockRecorder) FindGreetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGreetById", reflect.TypeOf((*MockGreetRepository)(nil).FindGreetById), ctx, id)
}

// GetGreetById mocks base method.
func (m *MockGreetRepository) GetGreetById(ctx context.Context, id int32, opt ...repository.GreetByIdOption) (model.Greet, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGreetById", varargs...)
	ret0, _ := ret[0].(model.Greet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGreetById indicates an expected call of GetGreetById.
func (mr *MockGreetRepositoryMockRecorder) GetGreetById(ctx, id interface{}, opt ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGreetById", reflect.TypeOf((*MockGreetRepository)(nil).GetGreetById), varargs...)
}

// GetGreetList mocks base method.
func (m *MockGreetRepository) GetGreetList(ctx context.Context, status, lastId, pageSize, page int32) ([]model.Greet, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGreetList", ctx, status, lastId, pageSize, page)
	ret0, _ := ret[0].([]model.Greet)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGreetList indicates an expected call of GetGreetList.
func (mr *MockGreetRepositoryMockRecorder) GetGreetList(ctx, status, lastId, pageSize, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGreetList", reflect.TypeOf((*MockGreetRepository)(nil).GetGreetList), ctx, status, lastId, pageSize, page)
}

// UpdateGreetCount mocks base method.
func (m *MockGreetRepository) UpdateGreetCount(ctx context.Context, id, num int32, column string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGreetCount", ctx, id, num, column)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGreetCount indicates an expected call of UpdateGreetCount.
func (mr *MockGreetRepositoryMockRecorder) UpdateGreetCount(ctx, id, num, column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGreetCount", reflect.TypeOf((*MockGreetRepository)(nil).UpdateGreetCount), ctx, id, num, column)
}

// UpdateGreetStatus mocks base method.
func (m *MockGreetRepository) UpdateGreetStatus(ctx context.Context, id, status int32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGreetStatus", ctx, id, status)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGreetStatus indicates an expected call of UpdateGreetStatus.
func (mr *MockGreetRepositoryMockRecorder) UpdateGreetStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGreetStatus", reflect.TypeOf((*MockGreetRepository)(nil).UpdateGreetStatus), ctx, id, status)
}
