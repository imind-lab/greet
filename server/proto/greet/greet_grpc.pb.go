// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package greet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetServiceClient is the client API for GreetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetServiceClient interface {
	CreateGreet(ctx context.Context, in *CreateGreetRequest, opts ...grpc.CallOption) (*CreateGreetResponse, error)
	GetGreetById(ctx context.Context, in *GetGreetByIdRequest, opts ...grpc.CallOption) (*GetGreetByIdResponse, error)
	GetGreetList(ctx context.Context, in *GetGreetListRequest, opts ...grpc.CallOption) (*GetGreetListResponse, error)
	UpdateGreetStatus(ctx context.Context, in *UpdateGreetStatusRequest, opts ...grpc.CallOption) (*UpdateGreetStatusResponse, error)
	UpdateGreetCount(ctx context.Context, in *UpdateGreetCountRequest, opts ...grpc.CallOption) (*UpdateGreetCountResponse, error)
	DeleteGreetById(ctx context.Context, in *DeleteGreetByIdRequest, opts ...grpc.CallOption) (*DeleteGreetByIdResponse, error)
	GetGreetListByStream(ctx context.Context, opts ...grpc.CallOption) (GreetService_GetGreetListByStreamClient, error)
}

type greetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetServiceClient(cc grpc.ClientConnInterface) GreetServiceClient {
	return &greetServiceClient{cc}
}

func (c *greetServiceClient) CreateGreet(ctx context.Context, in *CreateGreetRequest, opts ...grpc.CallOption) (*CreateGreetResponse, error) {
	out := new(CreateGreetResponse)
	err := c.cc.Invoke(ctx, "/greet.GreetService/CreateGreet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) GetGreetById(ctx context.Context, in *GetGreetByIdRequest, opts ...grpc.CallOption) (*GetGreetByIdResponse, error) {
	out := new(GetGreetByIdResponse)
	err := c.cc.Invoke(ctx, "/greet.GreetService/GetGreetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) GetGreetList(ctx context.Context, in *GetGreetListRequest, opts ...grpc.CallOption) (*GetGreetListResponse, error) {
	out := new(GetGreetListResponse)
	err := c.cc.Invoke(ctx, "/greet.GreetService/GetGreetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) UpdateGreetStatus(ctx context.Context, in *UpdateGreetStatusRequest, opts ...grpc.CallOption) (*UpdateGreetStatusResponse, error) {
	out := new(UpdateGreetStatusResponse)
	err := c.cc.Invoke(ctx, "/greet.GreetService/UpdateGreetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) UpdateGreetCount(ctx context.Context, in *UpdateGreetCountRequest, opts ...grpc.CallOption) (*UpdateGreetCountResponse, error) {
	out := new(UpdateGreetCountResponse)
	err := c.cc.Invoke(ctx, "/greet.GreetService/UpdateGreetCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) DeleteGreetById(ctx context.Context, in *DeleteGreetByIdRequest, opts ...grpc.CallOption) (*DeleteGreetByIdResponse, error) {
	out := new(DeleteGreetByIdResponse)
	err := c.cc.Invoke(ctx, "/greet.GreetService/DeleteGreetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) GetGreetListByStream(ctx context.Context, opts ...grpc.CallOption) (GreetService_GetGreetListByStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[0], "/greet.GreetService/GetGreetListByStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGetGreetListByStreamClient{stream}
	return x, nil
}

type GreetService_GetGreetListByStreamClient interface {
	Send(*GetGreetListByStreamRequest) error
	Recv() (*GetGreetListByStreamResponse, error)
	grpc.ClientStream
}

type greetServiceGetGreetListByStreamClient struct {
	grpc.ClientStream
}

func (x *greetServiceGetGreetListByStreamClient) Send(m *GetGreetListByStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceGetGreetListByStreamClient) Recv() (*GetGreetListByStreamResponse, error) {
	m := new(GetGreetListByStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetServiceServer is the server API for GreetService service.
// All implementations must embed UnimplementedGreetServiceServer
// for forward compatibility
type GreetServiceServer interface {
	CreateGreet(context.Context, *CreateGreetRequest) (*CreateGreetResponse, error)
	GetGreetById(context.Context, *GetGreetByIdRequest) (*GetGreetByIdResponse, error)
	GetGreetList(context.Context, *GetGreetListRequest) (*GetGreetListResponse, error)
	UpdateGreetStatus(context.Context, *UpdateGreetStatusRequest) (*UpdateGreetStatusResponse, error)
	UpdateGreetCount(context.Context, *UpdateGreetCountRequest) (*UpdateGreetCountResponse, error)
	DeleteGreetById(context.Context, *DeleteGreetByIdRequest) (*DeleteGreetByIdResponse, error)
	GetGreetListByStream(GreetService_GetGreetListByStreamServer) error
	mustEmbedUnimplementedGreetServiceServer()
}

// UnimplementedGreetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetServiceServer struct {
}

func (UnimplementedGreetServiceServer) CreateGreet(context.Context, *CreateGreetRequest) (*CreateGreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGreet not implemented")
}
func (UnimplementedGreetServiceServer) GetGreetById(context.Context, *GetGreetByIdRequest) (*GetGreetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGreetById not implemented")
}
func (UnimplementedGreetServiceServer) GetGreetList(context.Context, *GetGreetListRequest) (*GetGreetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGreetList not implemented")
}
func (UnimplementedGreetServiceServer) UpdateGreetStatus(context.Context, *UpdateGreetStatusRequest) (*UpdateGreetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGreetStatus not implemented")
}
func (UnimplementedGreetServiceServer) UpdateGreetCount(context.Context, *UpdateGreetCountRequest) (*UpdateGreetCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGreetCount not implemented")
}
func (UnimplementedGreetServiceServer) DeleteGreetById(context.Context, *DeleteGreetByIdRequest) (*DeleteGreetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGreetById not implemented")
}
func (UnimplementedGreetServiceServer) GetGreetListByStream(GreetService_GetGreetListByStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGreetListByStream not implemented")
}
func (UnimplementedGreetServiceServer) mustEmbedUnimplementedGreetServiceServer() {}

// UnsafeGreetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetServiceServer will
// result in compilation errors.
type UnsafeGreetServiceServer interface {
	mustEmbedUnimplementedGreetServiceServer()
}

func RegisterGreetServiceServer(s grpc.ServiceRegistrar, srv GreetServiceServer) {
	s.RegisterService(&GreetService_ServiceDesc, srv)
}

func _GreetService_CreateGreet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).CreateGreet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetService/CreateGreet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).CreateGreet(ctx, req.(*CreateGreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_GetGreetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGreetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).GetGreetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetService/GetGreetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).GetGreetById(ctx, req.(*GetGreetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_GetGreetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGreetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).GetGreetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetService/GetGreetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).GetGreetList(ctx, req.(*GetGreetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_UpdateGreetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGreetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).UpdateGreetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetService/UpdateGreetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).UpdateGreetStatus(ctx, req.(*UpdateGreetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_UpdateGreetCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGreetCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).UpdateGreetCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetService/UpdateGreetCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).UpdateGreetCount(ctx, req.(*UpdateGreetCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_DeleteGreetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGreetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).DeleteGreetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetService/DeleteGreetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).DeleteGreetById(ctx, req.(*DeleteGreetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_GetGreetListByStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).GetGreetListByStream(&greetServiceGetGreetListByStreamServer{stream})
}

type GreetService_GetGreetListByStreamServer interface {
	Send(*GetGreetListByStreamResponse) error
	Recv() (*GetGreetListByStreamRequest, error)
	grpc.ServerStream
}

type greetServiceGetGreetListByStreamServer struct {
	grpc.ServerStream
}

func (x *greetServiceGetGreetListByStreamServer) Send(m *GetGreetListByStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceGetGreetListByStreamServer) Recv() (*GetGreetListByStreamRequest, error) {
	m := new(GetGreetListByStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetService_ServiceDesc is the grpc.ServiceDesc for GreetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet.GreetService",
	HandlerType: (*GreetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGreet",
			Handler:    _GreetService_CreateGreet_Handler,
		},
		{
			MethodName: "GetGreetById",
			Handler:    _GreetService_GetGreetById_Handler,
		},
		{
			MethodName: "GetGreetList",
			Handler:    _GreetService_GetGreetList_Handler,
		},
		{
			MethodName: "UpdateGreetStatus",
			Handler:    _GreetService_UpdateGreetStatus_Handler,
		},
		{
			MethodName: "UpdateGreetCount",
			Handler:    _GreetService_UpdateGreetCount_Handler,
		},
		{
			MethodName: "DeleteGreetById",
			Handler:    _GreetService_DeleteGreetById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetGreetListByStream",
			Handler:       _GreetService_GetGreetListByStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "greet/greet.proto",
}
