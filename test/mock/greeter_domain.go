// Code generated by MockGen. DO NOT EDIT.
// Source: server/domain/greeter.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	"github.com/imind-lab/greeter/application/greeter/proto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGreeterDomain is a mock of GreeterDomain interface.
type MockGreeterDomain struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterDomainMockRecorder
}

// MockGreeterDomainMockRecorder is the mock recorder for MockGreeterDomain.
type MockGreeterDomainMockRecorder struct {
	mock *MockGreeterDomain
}

// NewMockGreeterDomain creates a new mock instance.
func NewMockGreeterDomain(ctrl *gomock.Controller) *MockGreeterDomain {
	mock := &MockGreeterDomain{ctrl: ctrl}
	mock.recorder = &MockGreeterDomainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreeterDomain) EXPECT() *MockGreeterDomainMockRecorder {
	return m.recorder
}

// CreateGreeter mocks base method.
func (m *MockGreeterDomain) CreateGreeter(ctx context.Context, dto *greeter.Greeter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGreeter", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGreeter indicates an expected call of CreateGreeter.
func (mr *MockGreeterDomainMockRecorder) CreateGreeter(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGreeter", reflect.TypeOf((*MockGreeterDomain)(nil).CreateGreeter), ctx, dto)
}

// DeleteGreeterById mocks base method.
func (m *MockGreeterDomain) DeleteGreeterById(ctx context.Context, id int32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGreeterById", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGreeterById indicates an expected call of DeleteGreeterById.
func (mr *MockGreeterDomainMockRecorder) DeleteGreeterById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGreeterById", reflect.TypeOf((*MockGreeterDomain)(nil).DeleteGreeterById), ctx, id)
}

// GetGreeterById mocks base method.
func (m *MockGreeterDomain) GetGreeterById(ctx context.Context, id int32) (*greeter.Greeter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGreeterById", ctx, id)
	ret0, _ := ret[0].(*greeter.Greeter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGreeterById indicates an expected call of GetGreeterById.
func (mr *MockGreeterDomainMockRecorder) GetGreeterById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGreeterById", reflect.TypeOf((*MockGreeterDomain)(nil).GetGreeterById), ctx, id)
}

// GetGreeterList mocks base method.
func (m *MockGreeterDomain) GetGreeterList(ctx context.Context, status, lastId, pageSize, page int32) (*greeter.GreeterList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGreeterList", ctx, status, lastId, pageSize, page)
	ret0, _ := ret[0].(*greeter.GreeterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGreeterList indicates an expected call of GetGreeterList.
func (mr *MockGreeterDomainMockRecorder) GetGreeterList(ctx, status, lastId, pageSize, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGreeterList", reflect.TypeOf((*MockGreeterDomain)(nil).GetGreeterList), ctx, status, lastId, pageSize, page)
}

// UpdateGreeterCount mocks base method.
func (m *MockGreeterDomain) UpdateGreeterCount(ctx context.Context, id, num int32, column string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGreeterCount", ctx, id, num, column)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGreeterCount indicates an expected call of UpdateGreeterCount.
func (mr *MockGreeterDomainMockRecorder) UpdateGreeterCount(ctx, id, num, column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGreeterCount", reflect.TypeOf((*MockGreeterDomain)(nil).UpdateGreeterCount), ctx, id, num, column)
}

// UpdateGreeterStatus mocks base method.
func (m *MockGreeterDomain) UpdateGreeterStatus(ctx context.Context, id, status int32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGreeterStatus", ctx, id, status)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGreeterStatus indicates an expected call of UpdateGreeterStatus.
func (mr *MockGreeterDomainMockRecorder) UpdateGreeterStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGreeterStatus", reflect.TypeOf((*MockGreeterDomain)(nil).UpdateGreeterStatus), ctx, id, status)
}
